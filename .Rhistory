X <- 7
2+2
library(palmerpenguins)
install.packages("palmerpenguins")
library(palmerpenguins)
2+2
packages.install(tidyverse)
packages.install(tidyverse)
install.packages(tidyverse)
install.packages('tidyverse')
HeunSystemNATable<-function(Fxyt=function(x,y,t){},Gxyt=function(x,y,t){},x0,y0,a,b,n){
x<-0
y<-0
t<-seq(a,b,by=(b-a)/(n-1))
x[1]<-x0
y[1]<-y0
for(i in 2:n){
x_temp<-x[i-1]+Fxyt(x[i-1],y[i-1],t[i-1])*(b-a)/(n-1)
y_temp<-y[i-1]+Gxyt(x[i-1],y[i-1],t[i-1])*(b-a)/(n-1)
x[i]<-x[i-1]+(Fxyt(x[i-1],y[i-1],t[i-1])+Fxyt(x_temp,y_temp,t[i]))*(b-a)/(2*(n-1))
y[i]<-y[i-1]+(Gxyt(x[i-1],y[i-1],t[i-1])+Gxyt(x_temp,y_temp,t[i]))*(b-a)/(2*(n-1))
}
plot(x,y,col="red",pch=20,cex=1.5)
#points(x[1],y[1],col="blue",pch=20,cex=2.5)
#recordPlot()
# Mark the beginning, middle, and end points
points(x[1], y[1], col = "blue", pch = 20, cex = 2.5)  # Beginning point
points(x[round(n / 2)], y[round(n / 2)], col = "green", pch = 20, cex = 2.5)  # Middle point
points(x[n], y[n], col = "purple", pch = 20, cex = 2.5)  # End point
recordPlot()
table<-data.frame(t,x,y)
return(table)
}
RungeKuttaSystemTable<-function(Fxyt=function(t,x,y){}, Gxyt=function(t,x,y){},x0,y0,a,b,n){
x<-0
y<-0
t<-seq(a,b,by=(b-a)/(n-1))
y[1]<-y0
x[1]<-x0
h <- (b-a)/(n-1) #step size
for(i in 2:n){
k1<-Fxyt(t[i-1], x[i-1], y[i-1])
l1<-Gxyt(t[i-1], x[i-1], y[i-1])
k2<-Fxyt(t[i-1]+(h/2), x[i-1]+((h*k1)/2), y[i-1]+((h*l1)/2))
l2<-Gxyt(t[i-1]+(h/2), x[i-1]+((h*k1)/2), y[i-1]+((h*l1)/2))
k3<-Fxyt(t[i-1]+(h/2), x[i-1]+((h*k2)/2), y[i-1]+((h*l2)/2))
l3<-Gxyt(t[i-1]+(h/2), x[i-1]+((h*k2)/2), y[i-1]+((h*l2)/2))
k4<-Fxyt(t[i-1]+h, x[i-1]+(h*k3), y[i-1]+(h*l3))
l4<-Gxyt(t[i-1]+h, x[i-1]+(h*k3), y[i-1]+(h*l3))
x[i]<-x[i-1]+(h/6)*(k1+2*k2+2*k3+k4)
y[i]<-y[i-1]+(h/6)*(l1+2*l2+2*l3+l4)
}
plot(x,y,col="red",pch=20,cex=1.5)
points(x[1],y[1],col="blue",pch=20,cex=2.5)
recordPlot()
table<-data.frame(t,x,y)
return(table)
}
EulerSystemNATable<-function(Fxyt=function(x,y,t){},Gxyt=function(x,y,t){},x0,y0,a,b,n){
x<-0
y<-0
t<-seq(a,b,by=(b-a)/(n-1))
x[1]<-x0
y[1]<-y0
for(i in 2:n){
x[i]<-x[i-1]+Fxyt(x[i-1],y[i-1],t[i-1])*(b-a)/(n-1)
y[i]<-y[i-1]+Gxyt(x[i-1],y[i-1],t[i-1])*(b-a)/(n-1)
}
plot(x,y,col="red",pch=20,cex=2.5)
points(x[1],y[1],col="red",pch=20,cex=2.5)
recordPlot()
table<-data.frame(t,x,y)
return(table)
}
library(shiny)
# Build the shiny user interface
ui_methods <- fluidPage(
sidebarLayout(
sidebarPanel(
h4("Select things:"),
textInput("eq_dxdt", "Equation for dx/dt", value = "sin(y)"),  # Equation input for dx/dt
textInput("eq_dydt", "Equation for dy/dt", value = "cos(x)"),  # Equation input for dy/dt
actionButton("euler", "Euler's Method"),
actionButton("heun", "Heun's Method"),
actionButton("runge", "Runge-Kutta Method"),
numericInput("x0_pick", "Initial x value (x0)", value = 0, min = 0, max = 100),
numericInput("y0_pick", "Initial y value (y0)", value = 0, min = 0, max = 100),
numericInput("a_pick", "Start Time", value = 0, min = 0, max = 100),
numericInput("b_pick", "End Time", value = 1, min = 0, max = 100, step = 0.1),
numericInput("dt_pick", "Delta t (0<dt<=1)", value = 0.01, min = 0, max = 1, step = 0.01),
),
mainPanel(
plotOutput("xy_plot"),
plotOutput("xt_plot"),
plotOutput("yt_plot")
)
)
)
# Build the shiny server
server_methods <- function(input, output) {
Fxyt <- reactive({
eval(parse(text = paste0("function(x, y, t) {", input$eq_dxdt, "}")))
})
Gxyt <- reactive({
eval(parse(text = paste0("function(x, y, t) {", input$eq_dydt, "}")))
})
#observeEvent(input$heun, {
#output$xy_plot <- renderPlot({HeunSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick,         (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)})
#    output$xt_plot <- renderPlot(plot(HeunSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick,     (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)$t, HeunSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick,           input$a_pick, input$b_pick,  (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)$x, xlab = "t", ylab = "x"))
#    output$yt_plot <- renderPlot(plot(HeunSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick,     (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)$t, HeunSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick,           input$a_pick, input$b_pick,  (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)$y, xlab = "t", ylab = "y"))
observeEvent(input$heun, {
data_heun <- reactive({
HeunSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
output$xy_plot <- renderPlot({
plotData <- data_heun()
plot(plotData$x, plotData$y, col="red", pch=20, cex=1.5)
points(plotData$x[1], plotData$y[1], col="blue", pch=20, cex=2.5) # Beginning
points(plotData$x[round(length(plotData$x)/2)], plotData$y[round(length(plotData$y)/2)], col="green", pch=20, cex=2.5) # Middle
points(plotData$x[length(plotData$x)], plotData$y[length(plotData$y)], col="purple", pch=20, cex=2.5) # End
})
output$xt_plot <- renderPlot({
plotData <- data_heun()
plot(plotData$t, plotData$x, type="l", col="black", pch=20, cex=1.5, xlab="Time (t)", ylab="x")
points(plotData$t[1], plotData$x[1], col="blue", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$x[round(length(plotData$x)/2)], col="green", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$x[length(plotData$x)], col="purple", pch=20, cex=2.5) # End
})
output$yt_plot <- renderPlot({
plotData <- data_heun()
plot(plotData$t, plotData$y, type="l", col="black", pch=20, cex=1.5, xlab="Time (t)", ylab="y")
points(plotData$t[1], plotData$y[1], col="blue", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$y[round(length(plotData$y)/2)], col="green", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$y[length(plotData$y)], col="purple", pch=20, cex=2.5) # End
})
})
observeEvent(input$euler, {
output$xy_plot <- renderPlot({EulerSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick,         (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)})
output$xt_plot <- renderPlot(plot(EulerSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick,     (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)$t, EulerSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick,           input$a_pick, input$b_pick,  (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)$x, xlab = "t", ylab = "x"))
output$yt_plot <- renderPlot(plot(EulerSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick,     (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)$t, EulerSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick,           input$a_pick, input$b_pick,  (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)$y, xlab = "t", ylab = "y"))
})
observeEvent(input$runge, {
output$xy_plot <- renderPlot({RungeKuttaSystemTable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick,         (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)})
output$xt_plot <- renderPlot(plot(RungeKuttaSystemTable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick,     (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)$t, RungeKuttaSystemTable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick,           input$a_pick, input$b_pick,  (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)$x, xlab = "t", ylab = "x"))
output$yt_plot <- renderPlot(plot(RungeKuttaSystemTable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick,     (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)$t, RungeKuttaSystemTable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick,           input$a_pick, input$b_pick,  (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)$y, xlab = "t", ylab = "y"))
})
}
shinyApp(ui = ui_methods, server = server_methods)
