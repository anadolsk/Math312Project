# Plot x vs t
#plot(plotData$t, plotData$x, type = "l", lwd=6.5, col = "orange2", ylim = c(min(plotData$x, plotData$y), max(plotData$x, plotData$y)), xlab = "Time (t)", ylab = "x & y")
# Prepare to overlay y vs t plot
#par(new = TRUE)
# Plot y vs t on the same graph
#plot(plotData$t, plotData$y, type = "l", lwd=6.5, col = "blue", xlab = "", ylab = "", axes = FALSE, ylim = c(min(plotData$x, plotData$y), max(plotData$x, plotData$y)))
# Add right y-axis for y vs t plot
#axis(side = 4)
#mtext("y", side = 4, line = 3)
#}
#})
# Reset the visibility when any method is chosen
observe({
input$euler
input$heun
input$runge
show_combined_xt_yt(TRUE) # Show the combined x vs t and y vs t plot
})
#}
shinyApp(ui = ui_methods, server = server_methods)
# Build the shiny server
server_methods <- function(input, output) {
Fxyt <- reactive({
eval(parse(text = paste0("function(x, y, t) {", input$eq_dxdt, "}")))
})
Gxyt <- reactive({
eval(parse(text = paste0("function(x, y, t) {", input$eq_dydt, "}")))
})
# Define reactive objects for each method
data_euler <- reactive({
EulerSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
data_heun <- reactive({
HeunSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
data_runge <- reactive({
RungeKuttaSystemTable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
# Reactive value to track the state of the combined plot button
show_combined_xt_yt <- reactiveVal(TRUE)
observeEvent(input$heun, {
data_heun <- reactive({
HeunSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
output$xy_plot <- renderPlot({
plotData <- data_heun()
plot(plotData$x, plotData$y, col="red3", pch=20, cex=1.5, xlab="x", ylab="y")
points(plotData$x[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$x[round(length(plotData$x)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$x[length(plotData$x)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
output$xt_plot <- renderPlot({
plotData <- data_heun()
plot(plotData$t, plotData$x, type="l", lwd=6.5, col="orange2", xlab="Time (t)", ylab="x")
points(plotData$t[1], plotData$x[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$x[round(length(plotData$x)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$x[length(plotData$x)], col="red", pch=20, cex=2.5) # End
})
output$yt_plot <- renderPlot({
plotData <- data_heun()
plot(plotData$t, plotData$y, type="l", lwd=6.5, col="blue", xlab="Time (t)", ylab="y")
points(plotData$t[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
# Render the combined x vs t and y vs t plot
output$combined_xt_yt_plot <- renderPlot({
if(show_combined_xt_yt()) {
plotData <- data_heun()  # Or any other chosen method's data
# Plot x vs t
plot(plotData$t, plotData$x, type = "l", lwd=6.5, col = "orange2", ylim = c(min(plotData$x, plotData$y), max(plotData$x, plotData$y)), xlab = "Time (t)", ylab = "x & y")
# Prepare to overlay y vs t plot
par(new = TRUE)
# Plot y vs t on the same graph
plot(plotData$t, plotData$y, type = "l", lwd=6.5, col = "blue", xlab = "", ylab = "", axes = FALSE, ylim = c(min(plotData$x, plotData$y), max(plotData$x, plotData$y)))
# Add right y-axis for y vs t plot
axis(side = 4)
mtext("y", side = 4, line = 3)
}
observe({
input$euler
input$heun
input$runge
show_combined_xt_yt(TRUE) # Show the combined x vs t and y vs t plot
})
})
observeEvent(input$euler, {
data_euler <- reactive({
EulerSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
output$xy_plot <- renderPlot({
plotData <- data_euler()
plot(plotData$x, plotData$y, col="cornflowerblue", pch=20, cex=1.5, xlab="x", ylab="y")
points(plotData$x[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$x[round(length(plotData$x)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$x[length(plotData$x)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
output$xt_plot <- renderPlot({
plotData <- data_euler()
plot(plotData$t, plotData$x, type="l", lwd=6.5, col="orange2", xlab="Time (t)", ylab="x")
points(plotData$t[1], plotData$x[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$x[round(length(plotData$x)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$x[length(plotData$x)], col="red", pch=20, cex=2.5) # End
})
output$yt_plot <- renderPlot({
plotData <- data_euler()
plot(plotData$t, plotData$y, type="l", lwd=6.5, col="blue", xlab="Time (t)", ylab="y")
points(plotData$t[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
# Render the combined x vs t and y vs t plot
output$combined_xt_yt_plot <- renderPlot({
if(show_combined_xt_yt()) {
plotData <- data_euler()  # Or any other chosen method's data
# Plot x vs t
plot(plotData$t, plotData$x, type = "l", lwd=6.5, col = "orange2", ylim = c(min(plotData$x, plotData$y), max(plotData$x, plotData$y)), xlab = "Time (t)", ylab = "x & y")
# Prepare to overlay y vs t plot
par(new = TRUE)
# Plot y vs t on the same graph
plot(plotData$t, plotData$y, type = "l", lwd=6.5, col = "blue", xlab = "", ylab = "", axes = FALSE, ylim = c(min(plotData$x, plotData$y), max(plotData$x, plotData$y)))
# Add right y-axis for y vs t plot
axis(side = 4)
mtext("y", side = 4, line = 3)
}
observe({
input$euler
input$heun
input$runge
show_combined_xt_yt(TRUE) # Show the combined x vs t and y vs t plot
})
})
observeEvent(input$runge, {
data_runge <- reactive({
RungeKuttaSystemTable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
output$xy_plot <- renderPlot({
plotData <- data_runge()
plot(plotData$x, plotData$y, col="purple", pch=20, cex=1.5, xlab="x", ylab="y")
points(plotData$x[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$x[round(length(plotData$x)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$x[length(plotData$x)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
output$xt_plot <- renderPlot({
plotData <- data_runge()
plot(plotData$t, plotData$x, type="l", lwd=6.5, col="orange2", xlab="Time (t)", ylab="x")
points(plotData$t[1], plotData$x[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$x[round(length(plotData$x)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$x[length(plotData$x)], col="red", pch=20, cex=2.5) # End
})
output$yt_plot <- renderPlot({
plotData <- data_runge()
plot(plotData$t, plotData$y, type="l", lwd=6.5, col="blue", xlab="Time (t)", ylab="y")
points(plotData$t[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
# Render the combined x vs t and y vs t plot
output$combined_xt_yt_plot <- renderPlot({
if(show_combined_xt_yt()) {
plotData <- data_runge()  # Or any other chosen method's data
# Plot x vs t
plot(plotData$t, plotData$x, type = "l", lwd=6.5, col = "orange2", ylim = c(min(plotData$x, plotData$y), max(plotData$x, plotData$y)), xlab = "Time (t)", ylab = "x & y")
# Prepare to overlay y vs t plot
par(new = TRUE)
# Plot y vs t on the same graph
plot(plotData$t, plotData$y, type = "l", lwd=6.5, col = "blue", xlab = "", ylab = "", axes = FALSE, ylim = c(min(plotData$x, plotData$y), max(plotData$x, plotData$y)))
# Add right y-axis for y vs t plot
axis(side = 4)
mtext("y", side = 4, line = 3)
}
observe({
input$euler
input$heun
input$runge
show_combined_xt_yt(TRUE) # Show the combined x vs t and y vs t plot
})
})
observeEvent(input$combined_plot, {
show_combined_xt_yt(FALSE) # Hide the combined x vs t and y vs t plot
output$xy_plot <- renderPlot({
plotData_euler <- data_euler()
plotData_heun <- data_heun()
plotData_runge <- data_runge()
plot(plotData_euler$x, plotData_euler$y, type="l", lwd=6.5, col="cornflowerblue", xlab="x", ylab="y")
lines(plotData_heun$x, plotData_heun$y, type="l", lwd=6.5, col="red3")
lines(plotData_runge$x, plotData_runge$y, type="l", lwd=6.5, col="purple")
})
output$xt_plot <- renderPlot({
plotData_euler <- data_euler()
plotData_heun <- data_heun()
plotData_runge <- data_runge()
plot(plotData_euler$t, plotData_euler$x, type="l", lwd=6.5, col="cornflowerblue", xlab="Time (t)", ylab="x")
lines(plotData_heun$t, plotData_heun$x, type="l", lwd=6.5, col="red3")
lines(plotData_runge$t, plotData_runge$x, type="l", lwd=6.5, col="purple")
})
output$yt_plot <- renderPlot({
plotData_euler <- data_euler()
plotData_heun <- data_heun()
plotData_runge <- data_runge()
plot(plotData_euler$t, plotData_euler$y, type="l", lwd=6.5, col="cornflowerblue", xlab="Time (t)", ylab="y")
lines(plotData_heun$t, plotData_heun$y, type="l", lwd=6.5, col="red3")
lines(plotData_runge$t, plotData_runge$y, type="l", lwd=6.5, col="purple")
})
})
# Render the combined x vs t and y vs t plot
#output$combined_xt_yt_plot <- renderPlot({
#if(show_combined_xt_yt()) {
#plotData <- data_euler()  # Or any other chosen method's data
# Plot x vs t
#plot(plotData$t, plotData$x, type = "l", lwd=6.5, col = "orange2", ylim = c(min(plotData$x, plotData$y), max(plotData$x, plotData$y)), xlab = "Time (t)", ylab = "x & y")
# Prepare to overlay y vs t plot
#par(new = TRUE)
# Plot y vs t on the same graph
#plot(plotData$t, plotData$y, type = "l", lwd=6.5, col = "blue", xlab = "", ylab = "", axes = FALSE, ylim = c(min(plotData$x, plotData$y), max(plotData$x, plotData$y)))
# Add right y-axis for y vs t plot
#axis(side = 4)
#mtext("y", side = 4, line = 3)
#}
#})
# Reset the visibility when any method is chosen
#observe({
#input$euler
#input$heun
#input$runge
#show_combined_xt_yt(TRUE) # Show the combined x vs t and y vs t plot
#})
#}
shinyApp(ui = ui_methods, server = server_methods)
# Build the shiny server
server_methods <- function(input, output) {
Fxyt <- reactive({
eval(parse(text = paste0("function(x, y, t) {", input$eq_dxdt, "}")))
})
Gxyt <- reactive({
eval(parse(text = paste0("function(x, y, t) {", input$eq_dydt, "}")))
})
# Define reactive objects for each method
data_euler <- reactive({
EulerSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
data_heun <- reactive({
HeunSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
data_runge <- reactive({
RungeKuttaSystemTable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
# Reactive value to track the state of the combined plot button
show_combined_xt_yt <- reactiveVal(TRUE)
observeEvent(input$heun, {
data_heun <- reactive({
HeunSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
output$xy_plot <- renderPlot({
plotData <- data_heun()
plot(plotData$x, plotData$y, col="red3", pch=20, cex=1.5, xlab="x", ylab="y")
points(plotData$x[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$x[round(length(plotData$x)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$x[length(plotData$x)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
output$xt_plot <- renderPlot({
plotData <- data_heun()
plot(plotData$t, plotData$x, type="l", lwd=6.5, col="orange2", xlab="Time (t)", ylab="x")
points(plotData$t[1], plotData$x[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$x[round(length(plotData$x)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$x[length(plotData$x)], col="red", pch=20, cex=2.5) # End
})
output$yt_plot <- renderPlot({
plotData <- data_heun()
plot(plotData$t, plotData$y, type="l", lwd=6.5, col="blue", xlab="Time (t)", ylab="y")
points(plotData$t[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
})
observeEvent(input$euler, {
data_euler <- reactive({
EulerSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
output$xy_plot <- renderPlot({
plotData <- data_euler()
plot(plotData$x, plotData$y, col="cornflowerblue", pch=20, cex=1.5, xlab="x", ylab="y")
points(plotData$x[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$x[round(length(plotData$x)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$x[length(plotData$x)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
output$xt_plot <- renderPlot({
plotData <- data_euler()
plot(plotData$t, plotData$x, type="l", lwd=6.5, col="orange2", xlab="Time (t)", ylab="x")
points(plotData$t[1], plotData$x[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$x[round(length(plotData$x)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$x[length(plotData$x)], col="red", pch=20, cex=2.5) # End
})
output$yt_plot <- renderPlot({
plotData <- data_euler()
plot(plotData$t, plotData$y, type="l", lwd=6.5, col="blue", xlab="Time (t)", ylab="y")
points(plotData$t[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
})
observeEvent(input$runge, {
data_runge <- reactive({
RungeKuttaSystemTable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
output$xy_plot <- renderPlot({
plotData <- data_runge()
plot(plotData$x, plotData$y, col="purple", pch=20, cex=1.5, xlab="x", ylab="y")
points(plotData$x[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$x[round(length(plotData$x)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$x[length(plotData$x)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
output$xt_plot <- renderPlot({
plotData <- data_runge()
plot(plotData$t, plotData$x, type="l", lwd=6.5, col="orange2", xlab="Time (t)", ylab="x")
points(plotData$t[1], plotData$x[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$x[round(length(plotData$x)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$x[length(plotData$x)], col="red", pch=20, cex=2.5) # End
})
output$yt_plot <- renderPlot({
plotData <- data_runge()
plot(plotData$t, plotData$y, type="l", lwd=6.5, col="blue", xlab="Time (t)", ylab="y")
points(plotData$t[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
})
observeEvent(input$combined_plot, {
show_combined_xt_yt(FALSE) # Hide the combined x vs t and y vs t plot
output$xy_plot <- renderPlot({
plotData_euler <- data_euler()
plotData_heun <- data_heun()
plotData_runge <- data_runge()
plot(plotData_euler$x, plotData_euler$y, type="l", lwd=6.5, col="cornflowerblue", xlab="x", ylab="y")
lines(plotData_heun$x, plotData_heun$y, type="l", lwd=6.5, col="red3")
lines(plotData_runge$x, plotData_runge$y, type="l", lwd=6.5, col="purple")
})
output$xt_plot <- renderPlot({
plotData_euler <- data_euler()
plotData_heun <- data_heun()
plotData_runge <- data_runge()
plot(plotData_euler$t, plotData_euler$x, type="l", lwd=6.5, col="cornflowerblue", xlab="Time (t)", ylab="x")
lines(plotData_heun$t, plotData_heun$x, type="l", lwd=6.5, col="red3")
lines(plotData_runge$t, plotData_runge$x, type="l", lwd=6.5, col="purple")
})
output$yt_plot <- renderPlot({
plotData_euler <- data_euler()
plotData_heun <- data_heun()
plotData_runge <- data_runge()
plot(plotData_euler$t, plotData_euler$y, type="l", lwd=6.5, col="cornflowerblue", xlab="Time (t)", ylab="y")
lines(plotData_heun$t, plotData_heun$y, type="l", lwd=6.5, col="red3")
lines(plotData_runge$t, plotData_runge$y, type="l", lwd=6.5, col="purple")
})
})
# Render the combined x vs t and y vs t plot
output$combined_xt_yt_plot <- renderPlot({
if(show_combined_xt_yt()) {
plotData <- data_euler()  # Or any other chosen method's data
# Plot x vs t
plot(plotData$t, plotData$x, type = "l", lwd=6.5, col = "orange2", ylim = c(min(plotData$x, plotData$y), max(plotData$x, plotData$y)), xlab = "Time (t)", ylab = "x & y")
# Prepare to overlay y vs t plot
par(new = TRUE)
Plot y vs t on the same graph
# Build the shiny server
server_methods <- function(input, output) {
Fxyt <- reactive({
eval(parse(text = paste0("function(x, y, t) {", input$eq_dxdt, "}")))
})
Gxyt <- reactive({
eval(parse(text = paste0("function(x, y, t) {", input$eq_dydt, "}")))
})
# Define reactive objects for each method
data_euler <- reactive({
EulerSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
data_heun <- reactive({
HeunSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
data_runge <- reactive({
RungeKuttaSystemTable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
# Reactive value to track the state of the combined plot button
show_combined_xt_yt <- reactiveVal(TRUE)
observeEvent(input$heun, {
data_heun <- reactive({
HeunSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
output$xy_plot <- renderPlot({
plotData <- data_heun()
plot(plotData$x, plotData$y, col="red3", pch=20, cex=1.5, xlab="x", ylab="y")
points(plotData$x[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$x[round(length(plotData$x)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$x[length(plotData$x)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
output$xt_plot <- renderPlot({
plotData <- data_heun()
plot(plotData$t, plotData$x, type="l", lwd=6.5, col="orange2", xlab="Time (t)", ylab="x")
points(plotData$t[1], plotData$x[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$x[round(length(plotData$x)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$x[length(plotData$x)], col="red", pch=20, cex=2.5) # End
})
output$yt_plot <- renderPlot({
plotData <- data_heun()
plot(plotData$t, plotData$y, type="l", lwd=6.5, col="blue", xlab="Time (t)", ylab="y")
points(plotData$t[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
})
observeEvent(input$euler, {
data_euler <- reactive({
EulerSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
output$xy_plot <- renderPlot({
plotData <- data_euler()
plot(plotData$x, plotData$y, col="cornflowerblue", pch=20, cex=1.5, xlab="x", ylab="y")
points(plotData$x[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$x[round(length(plotData$x)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$x[length(plotData$x)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
output$xt_plot <- renderPlot({
plotData <- data_euler()
plot(plotData$t, plotData$x, type="l", lwd=6.5, col="orange2", xlab="Time (t)", ylab="x")
points(plotData$t[1], plotData$x[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$x[round(length(plotData$x)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$x[length(plotData$x)], col="red", pch=20, cex=2.5) # End
})
output$yt_plot <- renderPlot({
plotData <- data_euler()
plot(plotData$t, plotData$y, type="l", lwd=6.5, col="blue", xlab="Time (t)", ylab="y")
points(plotData$t[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
})
observeEvent(input$runge, {
data_runge <- reactive({
RungeKuttaSystemTable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
output$xy_plot <- renderPlot({
plotData <- data_runge()
plot(plotData$x, plotData$y, col="purple", pch=20, cex=1.5, xlab="x", ylab="y")
points(plotData$x[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$x[round(length(plotData$x)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$x[length(plotData$x)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
output$xt_plot <- renderPlot({
plotData <- data_runge()
plot(plotData$t, plotData$x, type="l", lwd=6.5, col="orange2", xlab="Time (t)", ylab="x")
points(plotData$t[1], plotData$x[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$x[round(length(plotData$x)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$x[length(plotData$x)], col="red", pch=20, cex=2.5) # End
})
output$yt_plot <- renderPlot({
plotData <- data_runge()
plot(plotData$t, plotData$y, type="l", lwd=6.5, col="blue", xlab="Time (t)", ylab="y")
points(plotData$t[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
})
observeEvent(input$combined_plot, {
show_combined_xt_yt(FALSE) # Hide the combined x vs t and y vs t plot
output$xy_plot <- renderPlot({
plotData_euler <- data_euler()
plotData_heun <- data_heun()
plotData_runge <- data_runge()
plot(plotData_euler$x, plotData_euler$y, type="l", lwd=6.5, col="cornflowerblue", xlab="x", ylab="y")
lines(plotData_heun$x, plotData_heun$y, type="l", lwd=6.5, col="red3")
lines(plotData_runge$x, plotData_runge$y, type="l", lwd=6.5, col="purple")
})
output$xt_plot <- renderPlot({
plotData_euler <- data_euler()
plotData_heun <- data_heun()
plotData_runge <- data_runge()
plot(plotData_euler$t, plotData_euler$x, type="l", lwd=6.5, col="cornflowerblue", xlab="Time (t)", ylab="x")
lines(plotData_heun$t, plotData_heun$x, type="l", lwd=6.5, col="red3")
lines(plotData_runge$t, plotData_runge$x, type="l", lwd=6.5, col="purple")
})
output$yt_plot <- renderPlot({
plotData_euler <- data_euler()
plotData_heun <- data_heun()
plotData_runge <- data_runge()
plot(plotData_euler$t, plotData_euler$y, type="l", lwd=6.5, col="cornflowerblue", xlab="Time (t)", ylab="y")
lines(plotData_heun$t, plotData_heun$y, type="l", lwd=6.5, col="red3")
lines(plotData_runge$t, plotData_runge$y, type="l", lwd=6.5, col="purple")
})
})
# Render the combined x vs t and y vs t plot
output$combined_xt_yt_plot <- renderPlot({
if(show_combined_xt_yt()) {
plotData <- data_euler()  # Or any other chosen method's data
# Plot x vs t
plot(plotData$t, plotData$x, type = "l", lwd=6.5, col = "orange2", ylim = c(min(plotData$x, plotData$y), max(plotData$x, plotData$y)), xlab = "Time (t)", ylab = "x & y")
# Prepare to overlay y vs t plot
par(new = TRUE)
# Plot y vs t on the same graph
plot(plotData$t, plotData$y, type = "l", lwd=6.5, col = "blue", xlab = "", ylab = "", axes = FALSE, ylim = c(min(plotData$x, plotData$y), max(plotData$x, plotData$y)))
# Add right y-axis for y vs t plot
axis(side = 4)
mtext("y", side = 4, line = 3)
}
})
# Reset the visibility when any method is chosen
observe({
input$euler
input$heun
input$runge
show_combined_xt_yt(TRUE) # Show the combined x vs t and y vs t plot
})
}
shinyApp(ui = ui_methods, server = server_methods)
