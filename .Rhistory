})
observeEvent(input$combined_plot, {
show_combined_xt_yt(FALSE) # Hide the combined x vs t and y vs t plot
output$xy_plot <- renderPlot({
plotData_euler <- data_euler()
plotData_heun <- data_heun()
plotData_runge <- data_runge()
plot(plotData_euler$x, plotData_euler$y, type="l", lwd=6.5, col="cornflowerblue", xlab="x", ylab="y")
lines(plotData_heun$x, plotData_heun$y, type="l", lwd=6.5, col="red3")
lines(plotData_runge$x, plotData_runge$y, type="l", lwd=6.5, col="purple")
})
output$xt_plot <- renderPlot({
plotData_euler <- data_euler()
plotData_heun <- data_heun()
plotData_runge <- data_runge()
plot(plotData_euler$t, plotData_euler$x, type="l", lwd=6.5, col="cornflowerblue", xlab="Time (t)", ylab="x")
lines(plotData_heun$t, plotData_heun$x, type="l", lwd=6.5, col="red3")
lines(plotData_runge$t, plotData_runge$x, type="l", lwd=6.5, col="purple")
})
output$yt_plot <- renderPlot({
plotData_euler <- data_euler()
plotData_heun <- data_heun()
plotData_runge <- data_runge()
plot(plotData_euler$t, plotData_euler$y, type="l", lwd=6.5, col="cornflowerblue", xlab="Time (t)", ylab="y")
lines(plotData_heun$t, plotData_heun$y, type="l", lwd=6.5, col="red3")
lines(plotData_runge$t, plotData_runge$y, type="l", lwd=6.5, col="purple")
})
})
# Render the combined x vs t and y vs t plot
output$combined_xt_yt_plot <- renderPlot({
if(show_combined_xt_yt()) {
plotData <- data_euler()  # Or any other chosen method's data
# Plot x vs t
plot(plotData$t, plotData$x, type = "l", lwd=6.5, col = "orange", ylim = c(min(plotData$x, plotData$y), max(plotData$x, plotData$y)), xlab = "Time (t)", ylab = " ")
# Prepare to overlay y vs t plot
par(new = TRUE)
# Plot y vs t on the same graph
plot(plotData$t, plotData$y, type = "l", lwd=6.5, col = "blue", xlab = "", ylab = "", axes = FALSE, ylim = c(min(plotData$x, plotData$y), max(plotData$x, plotData$y)))
# Add right y-axis for y vs t plot
axis(side = 4)
mtext("y", side = 4, line = 3)
}
})
# Reset the visibility when any method is chosen
observe({
input$euler
input$heun
input$runge
show_combined_xt_yt(TRUE) # Show the combined x vs t and y vs t plot
})
}
shinyApp(ui = ui_methods, server = server_methods)
# Build the shiny server
server_methods <- function(input, output) {
Fxyt <- reactive({
eval(parse(text = paste0("function(x, y, t) {", input$eq_dxdt, "}")))
})
Gxyt <- reactive({
eval(parse(text = paste0("function(x, y, t) {", input$eq_dydt, "}")))
})
# Define reactive objects for each method
data_euler <- reactive({
EulerSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
data_heun <- reactive({
HeunSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
data_runge <- reactive({
RungeKuttaSystemTable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
# Reactive value to track the state of the combined plot button
show_combined_xt_yt <- reactiveVal(TRUE)
observeEvent(input$heun, {
show_combined_xt_yt(TRUE)
data_heun <- reactive({
HeunSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
output$xy_plot <- renderPlot({
plotData <- data_heun()
plot(plotData$x, plotData$y, col="red3", pch=20, cex=1.5, xlab="x", ylab="y")
points(plotData$x[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$x[round(length(plotData$x)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$x[length(plotData$x)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
output$xt_plot <- renderPlot({
plotData <- data_heun()
plot(plotData$t, plotData$x, type="l", lwd=6.5, col="orange2", xlab="Time (t)", ylab="x")
points(plotData$t[1], plotData$x[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$x[round(length(plotData$x)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$x[length(plotData$x)], col="red", pch=20, cex=2.5) # End
})
output$yt_plot <- renderPlot({
plotData <- data_heun()
plot(plotData$t, plotData$y, type="l", lwd=6.5, col="blue", xlab="Time (t)", ylab="y")
points(plotData$t[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
})
observeEvent(input$euler, {
show_combined_xt_yt(TRUE)
data_euler <- reactive({
EulerSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
output$xy_plot <- renderPlot({
plotData <- data_euler()
plot(plotData$x, plotData$y, col="cornflowerblue", pch=20, cex=1.5, xlab="x", ylab="y")
points(plotData$x[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$x[round(length(plotData$x)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$x[length(plotData$x)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
output$xt_plot <- renderPlot({
plotData <- data_euler()
plot(plotData$t, plotData$x, type="l", lwd=6.5, col="orange2", xlab="Time (t)", ylab="x")
points(plotData$t[1], plotData$x[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$x[round(length(plotData$x)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$x[length(plotData$x)], col="red", pch=20, cex=2.5) # End
})
output$yt_plot <- renderPlot({
plotData <- data_euler()
plot(plotData$t, plotData$y, type="l", lwd=6.5, col="blue", xlab="Time (t)", ylab="y")
points(plotData$t[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
})
observeEvent(input$runge, {
show_combined_xt_yt(TRUE)
data_runge <- reactive({
RungeKuttaSystemTable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
output$xy_plot <- renderPlot({
plotData <- data_runge()
plot(plotData$x, plotData$y, col="purple", pch=20, cex=1.5, xlab="x", ylab="y")
points(plotData$x[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$x[round(length(plotData$x)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$x[length(plotData$x)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
output$xt_plot <- renderPlot({
plotData <- data_runge()
plot(plotData$t, plotData$x, type="l", lwd=6.5, col="orange2", xlab="Time (t)", ylab="x")
points(plotData$t[1], plotData$x[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$x[round(length(plotData$x)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$x[length(plotData$x)], col="red", pch=20, cex=2.5) # End
})
output$yt_plot <- renderPlot({
plotData <- data_runge()
plot(plotData$t, plotData$y, type="l", lwd=6.5, col="blue", xlab="Time (t)", ylab="y")
points(plotData$t[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
})
observeEvent(input$combined_plot, {
show_combined_xt_yt(FALSE) # Hide the combined x vs t and y vs t plot
output$xy_plot <- renderPlot({
plotData_euler <- data_euler()
plotData_heun <- data_heun()
plotData_runge <- data_runge()
plot(plotData_euler$x, plotData_euler$y, type="l", lwd=6.5, col="cornflowerblue", xlab="x", ylab="y")
lines(plotData_heun$x, plotData_heun$y, type="l", lwd=6.5, col="red3")
lines(plotData_runge$x, plotData_runge$y, type="l", lwd=6.5, col="purple")
})
output$xt_plot <- renderPlot({
plotData_euler <- data_euler()
plotData_heun <- data_heun()
plotData_runge <- data_runge()
plot(plotData_euler$t, plotData_euler$x, type="l", lwd=6.5, col="cornflowerblue", xlab="Time (t)", ylab="x")
lines(plotData_heun$t, plotData_heun$x, type="l", lwd=6.5, col="red3")
lines(plotData_runge$t, plotData_runge$x, type="l", lwd=6.5, col="purple")
})
output$yt_plot <- renderPlot({
plotData_euler <- data_euler()
plotData_heun <- data_heun()
plotData_runge <- data_runge()
plot(plotData_euler$t, plotData_euler$y, type="l", lwd=6.5, col="cornflowerblue", xlab="Time (t)", ylab="y")
lines(plotData_heun$t, plotData_heun$y, type="l", lwd=6.5, col="red3")
lines(plotData_runge$t, plotData_runge$y, type="l", lwd=6.5, col="purple")
})
})
# Render the combined x vs t and y vs t plot
output$combined_xt_yt_plot <- renderPlot({
if(show_combined_xt_yt()) {
plotData <- data_euler()  # Or any other chosen method's data
# Plot x vs t
plot(plotData$t, plotData$x, type = "l", lwd=6.5, col = "orange2", ylim = c(min(plotData$x, plotData$y), max(plotData$x, plotData$y)), xlab = "Time (t)", ylab = " ")
# Prepare to overlay y vs t plot
par(new = TRUE)
# Plot y vs t on the same graph
plot(plotData$t, plotData$y, type = "l", lwd=6.5, col = "blue", xlab = "", ylab = "", axes = FALSE, ylim = c(min(plotData$x, plotData$y), max(plotData$x, plotData$y)))
# Add right y-axis for y vs t plot
axis(side = 4)
mtext("y", side = 4, line = 3)
}
})
# Reset the visibility when any method is chosen
observe({
input$euler
input$heun
input$runge
show_combined_xt_yt(TRUE) # Show the combined x vs t and y vs t plot
})
}
shinyApp(ui = ui_methods, server = server_methods)
library(shiny)
# Build the shiny user interface
ui_methods <- fluidPage(
sidebarLayout(
sidebarPanel(
h4("Select things:"),
textInput("eq_dxdt", "Equation for dx/dt", value = "sin(y)"),  # Equation input for dx/dt
textInput("eq_dydt", "Equation for dy/dt", value = "cos(x)"),  # Equation input for dy/dt
actionButton("euler", "Euler's Method", style = color: "white", background-color: "blue", border-color: "black"),
actionButton("heun", "Heun's Method"),
actionButton("runge", "Runge-Kutta Method"),
actionButton("combined_plot", "Plot Combined Methods"),
numericInput("x0_pick", "Initial x value (x0)", value = 0, min = 0, max = 100),
numericInput("y0_pick", "Initial y value (y0)", value = 0, min = 0, max = 100),
numericInput("a_pick", "Start Time", value = 0, min = 0, max = 100),
numericInput("b_pick", "End Time", value = 1, min = 0, max = 100, step = 0.1),
numericInput("dt_pick", "Delta t (0<dt<=1)", value = 0.01, min = 0, max = 1, step = 0.01),
),
mainPanel(
plotOutput("xy_plot"),
plotOutput("xt_plot"),
plotOutput("yt_plot"),
plotOutput("combined_xt_yt_plot")
)
)
)
library(shiny)
# Build the shiny user interface
ui_methods <- fluidPage(
sidebarLayout(
sidebarPanel(
h4("Select things:"),
textInput("eq_dxdt", "Equation for dx/dt", value = "sin(y)"),  # Equation input for dx/dt
textInput("eq_dydt", "Equation for dy/dt", value = "cos(x)"),  # Equation input for dy/dt
actionButton("euler", "Euler's Method", style = color: "white", background-color: "blue", border: "black"),
actionButton("heun", "Heun's Method"),
actionButton("runge", "Runge-Kutta Method"),
actionButton("combined_plot", "Plot Combined Methods"),
numericInput("x0_pick", "Initial x value (x0)", value = 0, min = 0, max = 100),
numericInput("y0_pick", "Initial y value (y0)", value = 0, min = 0, max = 100),
numericInput("a_pick", "Start Time", value = 0, min = 0, max = 100),
numericInput("b_pick", "End Time", value = 1, min = 0, max = 100, step = 0.1),
numericInput("dt_pick", "Delta t (0<dt<=1)", value = 0.01, min = 0, max = 1, step = 0.01),
),
mainPanel(
plotOutput("xy_plot"),
plotOutput("xt_plot"),
plotOutput("yt_plot"),
plotOutput("combined_xt_yt_plot")
)
)
)
library(shiny)
# Build the shiny user interface
ui_methods <- fluidPage(
sidebarLayout(
sidebarPanel(
h4("Select things:"),
textInput("eq_dxdt", "Equation for dx/dt", value = "sin(y)"),  # Equation input for dx/dt
textInput("eq_dydt", "Equation for dy/dt", value = "cos(x)"),  # Equation input for dy/dt
actionButton("euler", "Euler's Method", style = color: "white", background-color: "blue"),
actionButton("heun", "Heun's Method"),
actionButton("runge", "Runge-Kutta Method"),
actionButton("combined_plot", "Plot Combined Methods"),
numericInput("x0_pick", "Initial x value (x0)", value = 0, min = 0, max = 100),
numericInput("y0_pick", "Initial y value (y0)", value = 0, min = 0, max = 100),
numericInput("a_pick", "Start Time", value = 0, min = 0, max = 100),
numericInput("b_pick", "End Time", value = 1, min = 0, max = 100, step = 0.1),
numericInput("dt_pick", "Delta t (0<dt<=1)", value = 0.01, min = 0, max = 1, step = 0.01),
),
mainPanel(
plotOutput("xy_plot"),
plotOutput("xt_plot"),
plotOutput("yt_plot"),
plotOutput("combined_xt_yt_plot")
)
)
)
library(shiny)
# Build the shiny user interface
ui_methods <- fluidPage(
sidebarLayout(
sidebarPanel(
h4("Select things:"),
textInput("eq_dxdt", "Equation for dx/dt", value = "sin(y)"),  # Equation input for dx/dt
textInput("eq_dydt", "Equation for dy/dt", value = "cos(x)"),  # Equation input for dy/dt
actionButton("euler", "Euler's Method", style = color: "white"),
actionButton("heun", "Heun's Method"),
actionButton("runge", "Runge-Kutta Method"),
actionButton("combined_plot", "Plot Combined Methods"),
numericInput("x0_pick", "Initial x value (x0)", value = 0, min = 0, max = 100),
numericInput("y0_pick", "Initial y value (y0)", value = 0, min = 0, max = 100),
numericInput("a_pick", "Start Time", value = 0, min = 0, max = 100),
numericInput("b_pick", "End Time", value = 1, min = 0, max = 100, step = 0.1),
numericInput("dt_pick", "Delta t (0<dt<=1)", value = 0.01, min = 0, max = 1, step = 0.01),
),
mainPanel(
plotOutput("xy_plot"),
plotOutput("xt_plot"),
plotOutput("yt_plot"),
plotOutput("combined_xt_yt_plot")
)
)
)
library(shiny)
# Build the shiny user interface
ui_methods <- fluidPage(
sidebarLayout(
sidebarPanel(
h4("Select things:"),
textInput("eq_dxdt", "Equation for dx/dt", value = "sin(y)"),  # Equation input for dx/dt
textInput("eq_dydt", "Equation for dy/dt", value = "cos(x)"),  # Equation input for dy/dt
actionButton("euler", "Euler's Method", style = col: "white"),
actionButton("heun", "Heun's Method"),
actionButton("runge", "Runge-Kutta Method"),
actionButton("combined_plot", "Plot Combined Methods"),
numericInput("x0_pick", "Initial x value (x0)", value = 0, min = 0, max = 100),
numericInput("y0_pick", "Initial y value (y0)", value = 0, min = 0, max = 100),
numericInput("a_pick", "Start Time", value = 0, min = 0, max = 100),
numericInput("b_pick", "End Time", value = 1, min = 0, max = 100, step = 0.1),
numericInput("dt_pick", "Delta t (0<dt<=1)", value = 0.01, min = 0, max = 1, step = 0.01),
),
mainPanel(
plotOutput("xy_plot"),
plotOutput("xt_plot"),
plotOutput("yt_plot"),
plotOutput("combined_xt_yt_plot")
)
)
)
library(shiny)
# Build the shiny user interface
ui_methods <- fluidPage(
sidebarLayout(
sidebarPanel(
h4("Select things:"),
textInput("eq_dxdt", "Equation for dx/dt", value = "sin(y)"),  # Equation input for dx/dt
textInput("eq_dydt", "Equation for dy/dt", value = "cos(x)"),  # Equation input for dy/dt
actionButton("euler", "Euler's Method", col="white"),
actionButton("heun", "Heun's Method"),
actionButton("runge", "Runge-Kutta Method"),
actionButton("combined_plot", "Plot Combined Methods"),
numericInput("x0_pick", "Initial x value (x0)", value = 0, min = 0, max = 100),
numericInput("y0_pick", "Initial y value (y0)", value = 0, min = 0, max = 100),
numericInput("a_pick", "Start Time", value = 0, min = 0, max = 100),
numericInput("b_pick", "End Time", value = 1, min = 0, max = 100, step = 0.1),
numericInput("dt_pick", "Delta t (0<dt<=1)", value = 0.01, min = 0, max = 1, step = 0.01),
),
mainPanel(
plotOutput("xy_plot"),
plotOutput("xt_plot"),
plotOutput("yt_plot"),
plotOutput("combined_xt_yt_plot")
)
)
)
# Build the shiny server
server_methods <- function(input, output) {
Fxyt <- reactive({
eval(parse(text = paste0("function(x, y, t) {", input$eq_dxdt, "}")))
})
Gxyt <- reactive({
eval(parse(text = paste0("function(x, y, t) {", input$eq_dydt, "}")))
})
# Define reactive objects for each method
data_euler <- reactive({
EulerSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
data_heun <- reactive({
HeunSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
data_runge <- reactive({
RungeKuttaSystemTable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
# Reactive value to track the state of the combined plot button
show_combined_xt_yt <- reactiveVal(TRUE)
observeEvent(input$heun, {
show_combined_xt_yt(TRUE)
data_heun <- reactive({
HeunSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
output$xy_plot <- renderPlot({
plotData <- data_heun()
plot(plotData$x, plotData$y, col="red3", pch=20, cex=1.5, xlab="x", ylab="y")
points(plotData$x[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$x[round(length(plotData$x)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$x[length(plotData$x)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
output$xt_plot <- renderPlot({
plotData <- data_heun()
plot(plotData$t, plotData$x, type="l", lwd=6.5, col="orange2", xlab="Time (t)", ylab="x")
points(plotData$t[1], plotData$x[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$x[round(length(plotData$x)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$x[length(plotData$x)], col="red", pch=20, cex=2.5) # End
})
output$yt_plot <- renderPlot({
plotData <- data_heun()
plot(plotData$t, plotData$y, type="l", lwd=6.5, col="blue", xlab="Time (t)", ylab="y")
points(plotData$t[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
})
observeEvent(input$euler, {
show_combined_xt_yt(TRUE)
data_euler <- reactive({
EulerSystemNATable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
output$xy_plot <- renderPlot({
plotData <- data_euler()
plot(plotData$x, plotData$y, col="cornflowerblue", pch=20, cex=1.5, xlab="x", ylab="y")
points(plotData$x[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$x[round(length(plotData$x)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$x[length(plotData$x)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
output$xt_plot <- renderPlot({
plotData <- data_euler()
plot(plotData$t, plotData$x, type="l", lwd=6.5, col="orange2", xlab="Time (t)", ylab="x")
points(plotData$t[1], plotData$x[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$x[round(length(plotData$x)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$x[length(plotData$x)], col="red", pch=20, cex=2.5) # End
})
output$yt_plot <- renderPlot({
plotData <- data_euler()
plot(plotData$t, plotData$y, type="l", lwd=6.5, col="blue", xlab="Time (t)", ylab="y")
points(plotData$t[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
})
observeEvent(input$runge, {
show_combined_xt_yt(TRUE)
data_runge <- reactive({
RungeKuttaSystemTable(Fxyt(), Gxyt(), input$x0_pick, input$y0_pick, input$a_pick, input$b_pick, (input$b_pick-input$a_pick) * (1/input$dt_pick) + 1)
})
output$xy_plot <- renderPlot({
plotData <- data_runge()
plot(plotData$x, plotData$y, col="purple", pch=20, cex=1.5, xlab="x", ylab="y")
points(plotData$x[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$x[round(length(plotData$x)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$x[length(plotData$x)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
output$xt_plot <- renderPlot({
plotData <- data_runge()
plot(plotData$t, plotData$x, type="l", lwd=6.5, col="orange2", xlab="Time (t)", ylab="x")
points(plotData$t[1], plotData$x[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$x[round(length(plotData$x)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$x[length(plotData$x)], col="red", pch=20, cex=2.5) # End
})
output$yt_plot <- renderPlot({
plotData <- data_runge()
plot(plotData$t, plotData$y, type="l", lwd=6.5, col="blue", xlab="Time (t)", ylab="y")
points(plotData$t[1], plotData$y[1], col="forestgreen", pch=20, cex=2.5) # Beginning
points(plotData$t[round(length(plotData$t)/2)], plotData$y[round(length(plotData$y)/2)], col="gold", pch=20, cex=2.5) # Middle
points(plotData$t[length(plotData$t)], plotData$y[length(plotData$y)], col="red", pch=20, cex=2.5) # End
})
})
observeEvent(input$combined_plot, {
show_combined_xt_yt(FALSE) # Hide the combined x vs t and y vs t plot
output$xy_plot <- renderPlot({
plotData_euler <- data_euler()
plotData_heun <- data_heun()
plotData_runge <- data_runge()
plot(plotData_euler$x, plotData_euler$y, type="l", lwd=6.5, col="cornflowerblue", xlab="x", ylab="y")
lines(plotData_heun$x, plotData_heun$y, type="l", lwd=6.5, col="red3")
lines(plotData_runge$x, plotData_runge$y, type="l", lwd=6.5, col="purple")
})
output$xt_plot <- renderPlot({
plotData_euler <- data_euler()
plotData_heun <- data_heun()
plotData_runge <- data_runge()
plot(plotData_euler$t, plotData_euler$x, type="l", lwd=6.5, col="cornflowerblue", xlab="Time (t)", ylab="x")
lines(plotData_heun$t, plotData_heun$x, type="l", lwd=6.5, col="red3")
lines(plotData_runge$t, plotData_runge$x, type="l", lwd=6.5, col="purple")
})
output$yt_plot <- renderPlot({
plotData_euler <- data_euler()
plotData_heun <- data_heun()
plotData_runge <- data_runge()
plot(plotData_euler$t, plotData_euler$y, type="l", lwd=6.5, col="cornflowerblue", xlab="Time (t)", ylab="y")
lines(plotData_heun$t, plotData_heun$y, type="l", lwd=6.5, col="red3")
lines(plotData_runge$t, plotData_runge$y, type="l", lwd=6.5, col="purple")
})
})
# Render the combined x vs t and y vs t plot
output$combined_xt_yt_plot <- renderPlot({
if(show_combined_xt_yt()) {
plotData <- data_euler()  # Or any other chosen method's data
# Plot x vs t
plot(plotData$t, plotData$x, type = "l", lwd=6.5, col = "orange2", ylim = c(min(plotData$x, plotData$y), max(plotData$x, plotData$y)), xlab = "Time (t)", ylab = "x & y")
# Prepare to overlay y vs t plot
par(new = TRUE)
# Plot y vs t on the same graph
plot(plotData$t, plotData$y, type = "l", lwd=6.5, col = "blue", xlab = "", ylab = "", axes = FALSE, ylim = c(min(plotData$x, plotData$y), max(plotData$x, plotData$y)))
# Add right y-axis for y vs t plot
axis(side = 4)
mtext("y", side = 4, line = 3)
}
})
# Reset the visibility when any method is chosen
observe({
input$euler
input$heun
input$runge
show_combined_xt_yt(TRUE) # Show the combined x vs t and y vs t plot
})
}
shinyApp(ui = ui_methods, server = server_methods)
